class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (head == NULL || left == right) {
        return head;
    }

    // Create a dummy node to simplify edge cases
    ListNode* dummy = new ListNode(0);
    dummy->next = head;
    ListNode* leftPrev = dummy;

    // Move leftPrev to the node just before the left position
    for (int i = 1; i < left; ++i) {
        leftPrev = leftPrev->next;
    }

    // Reverse the segment
    ListNode* cur = leftPrev->next;
    ListNode* prev = NULL;
    ListNode* next = NULL;

    for (int i = left; i <= right; ++i) {
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }

    // Connect the reversed segment with the rest of the list
    leftPrev->next->next = cur;
    leftPrev->next = prev;

    // The new head of the list
    ListNode* newHead = dummy->next;
    delete dummy; // Free the dummy node
    
    return newHead;
}
    
};