/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// Function to merge two sorted linked lists
ListNode* merge(ListNode* l1, ListNode* l2) {
    if (!l1) return l2;
    if (!l2) return l1;

    if (l1->val < l2->val) {
        l1->next = merge(l1->next, l2);
        return l1;
    } else {
        l2->next = merge(l1, l2->next);
        return l2;
    }
}

// Function to find the middle of the linked list
ListNode* findMiddle(ListNode* head) {
    if (!head || !head->next) return head;

    ListNode* slow = head;
    ListNode* fast = head->next;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}


class Solution {
public:
    ListNode* sortList(ListNode* head) {
         if (!head || !head->next) return head;

    // Find the middle of the list
    ListNode* mid = findMiddle(head);
    ListNode* rightHead = mid->next;
    mid->next = nullptr; // Split the list into two halves

    // Recursively sort both halves
    ListNode* left = sortList(head);
    ListNode* right = sortList(rightHead);

    // Merge the two sorted halves
    return merge(left, right);
    }
};