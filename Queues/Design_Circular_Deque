#include <iostream>
using namespace std;

class MyCircularDeque {
private:
    int* deque;          // Array to store deque elements
    int front;           // Index of the front element
    int rear;            // Index of the last element
    int maxSize;         // Maximum size of the deque
    int count;           // Current count of elements

public:
    // Constructor to initialize the deque
    MyCircularDeque(int k) {
        maxSize = k;
        deque = new int[maxSize];
        front = 0;
        rear = -1; // rear starts before the front in a circular manner
        count = 0; // Initially, the count of elements is 0
    }

    // Insert an item at the front of the deque
    bool insertFront(int value) {
        if (isFull()) {
            return false; // Deque is full
        }
        front = (front - 1 + maxSize) % maxSize; // Move front pointer
        deque[front] = value;                    // Insert the value
        count++;
        return true;
    }

    // Insert an item at the rear of the deque
    bool insertLast(int value) {
        if (isFull()) {
            return false; // Deque is full
        }
        rear = (rear + 1) % maxSize;            // Move rear pointer
        deque[rear] = value;                    // Insert the value
        count++;
        return true;
    }

    // Delete an item from the front of the deque
    bool deleteFront() {
        if (isEmpty()) {
            return false; // Deque is empty
        }
        front = (front + 1) % maxSize;           // Move front pointer
        count--;
        return true;
    }

    // Delete an item from the rear of the deque
    bool deleteLast() {
        if (isEmpty()) {
            return false; // Deque is empty
        }
        rear = (rear - 1 + maxSize) % maxSize; // Move rear pointer
        count--;
        return true;
    }

    // Get the front item from the deque
    int getFront() {
        if (isEmpty()) {
            return -1; // Deque is empty
        }
        return deque[front]; // Return front value
    }

    // Get the last item from the deque
    int getRear() {
        if (isEmpty()) {
            return -1; // Deque is empty
        }
        return deque[rear]; // Return rear value
    }

    // Check if the deque is empty
    bool isEmpty() {
        return count == 0; // Return true if count is 0
    }

    // Check if the deque is full
    bool isFull() {
        return count == maxSize; // Return true if count equals maxSize
    }

    // Destructor to free allocated memory
    ~MyCircularDeque() {
        delete[] deque; // Free the allocated memory
    }
};

// Example usage
int main() {
    MyCircularDeque deque(3); // Create a deque of size 3

    cout << deque.insertLast(1) << endl; // true
    cout << deque.insertLast(2) << endl; // true
    cout << deque.insertFront(3) << endl; // true
    cout << deque.insertFront(4) << endl; // false (deque is full)
    cout << deque.getRear() << endl; // 2
    cout << deque.isFull() << endl; // true
    cout << deque.deleteLast() << endl; // true
    cout << deque.insertFront(4) << endl; // true
    cout << deque.getFront() << endl; // 4

    return 0;
}
