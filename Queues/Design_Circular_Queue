class MyCircularQueue {
private:
    vector<int> queue;
    int front, rear, size, capacity;

public:
    // Constructor initializes the circular queue with a given capacity
    MyCircularQueue(int k) {
        capacity = k;
        queue.resize(capacity);
        front = 0;
        rear = -1;
        size = 0;
    }

    // Insert an element into the circular queue. Return true if successful.
    bool enQueue(int value) {
        if (isFull()) {
            return false;
        }
        // Move rear circularly using modulo
        rear = (rear + 1) % capacity;
        queue[rear] = value;
        size++;
        return true;
    }

    // Delete an element from the circular queue. Return true if successful.
    bool deQueue() {
        if (isEmpty()) {
            return false;
        }
        // Move front circularly using modulo
        front = (front + 1) % capacity;
        size--;
        return true;
    }

    // Get the front item from the queue
    int Front() {
        if (isEmpty()) {
            return -1;
        }
        return queue[front];
    }

    // Get the last item from the queue
    int Rear() {
        if (isEmpty()) {
            return -1;
        }
        return queue[rear];
    }

    // Check if the circular queue is empty
    bool isEmpty() {
        return size == 0;
    }

    // Check if the circular queue is full
    bool isFull() {
        return size == capacity;
    }
        
    
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */